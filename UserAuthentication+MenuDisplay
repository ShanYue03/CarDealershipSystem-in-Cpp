/* this code enables user to register their ID's with password(including symbols), which then saves the data to a txt file named user.txt
every time the code runs, it will directly take the data from the txt file in the computer for authentication. 
Upon Login the terminal will generate options for user to interact with */


#include <iostream>
#include <map>
#include <string>
#include <fstream>

using namespace std;

const string FILENAME = "users.txt";

// Function prototypes
void saveUsersToFile(const map<string, string>& users);
void loadUsersFromFile(map<string, string>& users);
void addNewUser(map<string, string>& users);
bool authenticateUser(const map<string, string>& users, const string& id, const string& password);

int main() {
    map<string, string> users;

    // Load existing users from file
    loadUsersFromFile(users);

    int choice;
        cout << "----------------------------------" << endl;
        cout << "\t     Welcome" << endl;
        cout << "----------------------------------" << endl;
        cout << "1. Login\n2. Register\nEnter your choice: ";
        cin >> choice;

    //Login
    if (choice == 1) {

     bool identified = false;
     while(identified != true)
     {
       string id, password;

        cout << "Enter your ID: ";
        cin >> id;
        cout << "Enter your password: ";
        cin >> password;

        if (authenticateUser(users, id, password)) {
            cout << "Authentication successful. Welcome!" << endl;
            identified = true;
        } else {
            cout << "\n\033[1m\033[3mAuthentication failed :/ Invalid ID or password.\033[0m" << endl;
            identified = false;
        }
     }

       int menuChoice;
       {
           while(menuChoice != 9)
       {
           cout << "----------------------------------" << endl;
        cout << "\t  Option to Choose" << endl;
        cout << "----------------------------------" << endl;
        cout << "1. Add a new car\n2. Modify car data\n3. Display all cars\n4. Sort cars by brand or price" << endl;
        cout << "5. Search for a car by its unique ID\n6. Track the number of cars sold" << endl;
        cout << "7. Remove a car record\n8. Sort cars by best-selling brand\n9. Exit\nEnter your choice: ";

        cin >> menuChoice;

        /** Implement the function HERE **/
//        switch(menuChoice)
//        {
//           case 1:
//        }

       }
       cout << "\nThankyou and Goodbye!" << endl;
       }
    }

    //Register
    else if (choice == 2) {
        addNewUser(users);
        saveUsersToFile(users);
        cout << "New user registered successfully." << endl;
    } else {
        cout << "Invalid choice." << endl;
    }

    return 0;
}

void saveUsersToFile(const map<string, string>& users) {
    ofstream outfile(FILENAME);
    if (outfile.is_open()) {
        for (const auto& user : users) {
            outfile << user.first << " " << user.second << endl;
        }
        outfile.close();
    } else {
        cerr << "Unable to open file for writing." << endl;
    }
}

void loadUsersFromFile(map<string, string>& users) {
    ifstream infile(FILENAME);
    if (infile.is_open()) {
        string id, password;
        while (infile >> id >> password) {
            users[id] = password;
        }
        infile.close();
    } else {
        cerr << "No user file found. Starting with an empty user list." << endl;
    }
}

void addNewUser(map<string, string>& users) {
    string id, password;
    cout << "Enter new user ID: ";
    cin >> id;
    cout << "Enter new user password: ";
    cin >> password;
    users[id] = password;
}

bool authenticateUser(const map<string, string>& users, const string& id, const string& password) {
    auto it = users.find(id);
    if (it != users.end() && it->second == password) {
        return true;
    }
    return false;
}
